/*
 * mpu6xxx.asm
 *
 *  Created: 2025-05-28 ?? 4:51:10
 *   Author: kana0
 */ 
  #include "Myinclude.inc"

 #define	TMODE_LED	0x01	; LED testmode
 #define	TMODE_SEG1	0x02	; seg1 testmode
 #define	TMODE_SEGN	0x03	; segn testmode
 #define	TMODE_BUZ	0x04	; buzer testmode
 #define	TMODE_PHONE	0x05	; phone testmode
 #define	TMODE_PHOTO	0x06	; photo testmode
 #define	TMODE_TEMP	0x07	; photo testmode
 #define	TMODE_PROJ	0x08	; photo testmode
 #define	TESTmode	r23		; testmode register

 #define	GoStop_state	 r10

 #define	Carry_Max	100		;삼각파 최대
 #define	Carry_Meg	r8		;삼각파 크기
 #define	ref			r9		;FND 와 동시에 사용 x 

 #define	FORWARD		0x80
 #define	BACKWARD	0x40
 #define	Direction	r3

  #define	refL		r4		
 #define	refH		r5
 
 .CSEG
	.ORG 0x0000 ;
	JMP		RESET
	.ORG 0x00A
	;jmp		Ext_Int4
	;jmp		Ext_Int5
	.ORG 0x0014
	;jmp		Timer2_ovf		;BUZ
	.ORG 0x001C
	;jmp		Timer1_ovf
	.ORG 0x0024
	jmp		UART_RXInt
	.ORG 0x0046;

 RESET:

	SETSP RAMEND		  ; Set Stack Pointer
	SET_Register_R0R1R2
	
	rcall	UART_Init
	rcall	TWI_Init
	;rcall	Timer2_Init

	sei
	;rcall	PROJ_TEST
	rcall	Read_MPU
	/*
	SETZ	LOOK_0
	lpm		r24, Z+
	rcall	HexDisp

	lpm		r24, Z+
	rcall	HexDisp

	lpm		r24, Z+
	rcall	HexDisp

	lpm		r24, Z+
	rcall	HexDisp

	PUTC	' '
	*/
forever:
	rjmp	forever

StartStr:
	.db		"This is Test Program with UART Interrupt", CR, EOS
EndStr:
	.db		"Test is closed with CTRL-C", CR, EOS

#include	"UARTio.asm"
#include	"I2C.asm"
#include	"Timer.asm"

;**************************************

PROJ_TEST:
	rcall	UARTint_On	; uart interrupt on
	;rcall	Timer2_Init2
	rcall	TWI_Init		; pull up, bitrate setting for i2c            나중에 자이로 센서 추가 시 활성화
	ldi		TESTmode, TMODE_PROJ
	sei					  ; interrupt 활성화
PROJloop:
	cp		TESTmode, r0
	brne	PROJloop
	rjmp	DonePOJ
DonePOJ:
	cli
	rcall	UARTint_Off
	;rcall	Timer_Off
	rcall	TWI_Off

	ldi		temp, 0xff
	out		DDRA, temp
	out		PORTA, temp

	ret
	;**************************************************************************
Read_MPU:
	; 초기화
;==============================
; 슬립 모드 해제 (0x6B ← 0x00)
;==============================
	rcall	TWI_Start
	ldi		I2Cdata, 0xD0			; SLA+W (0x68 << 1)
	rcall	TWI_Write
	ldi		I2Cdata, 0x6B			; PWR_MGMT_1
	rcall	TWI_Write
	ldi		I2Cdata, 0x00			; 슬립 비트 클리어
	rcall	TWI_Write
	rcall	TWI_Stop

;==============================
; 가속도계 데이터 읽기 시작 (0x3B부터 6바이트)
;==============================
	rcall	TWI_Start
	ldi		I2Cdata, 0xD0			; SLA+W
	rcall	TWI_Write
	ldi		I2Cdata, 0x3B			; ACCEL_XOUT_H
	rcall	TWI_Write

; Repeated Start → Read 시작
	rcall	TWI_Start
	ldi		I2Cdata, 0xD1			; SLA+R
	rcall	TWI_Write

; 6바이트 수신 (ACK 5회, 마지막 NACK)
	ldi		r20, 14					; 반복 횟수
	ldi		ZL, low(RawAccelBuffer)
	ldi		ZH, high(RawAccelBuffer)

ReadLoop:
	dec		r20
	mov		I2CAck, r20				; 마지막 바이트일 때만 NACK
	rcall	TWI_Read
	st		Z+, I2Cdata				; 버퍼에 저장
	tst		r20
	brne	ReadLoop

	rcall	TWI_Stop
; print result
	PUTC	CR

	SETXY	X, RawAccelBuffer
	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_X ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneX          ; 양수면 아무 작업도 하지 않고 종료

Make_X:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneX:

	ldi		temp, 0x00
	mov		r5, temp
	ldi		temp, 0xA0
	mov		r4, temp
	
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '

	rcall	CONV_DEG
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '



	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_Y ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneY          ; 양수면 아무 작업도 하지 않고 종료

Make_Y:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneY:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '

	rcall	CONV_DEG
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '


	
	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_Z ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneZ          ; 양수면 아무 작업도 하지 않고 종료

Make_Z:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneZ:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '
	
	/*

	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_T ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneT          ; 양수면 아무 작업도 하지 않고 종료

Make_T:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneT:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '

	


	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_GX ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneGX          ; 양수면 아무 작업도 하지 않고 종료

Make_GX:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneGX:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '

	


	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_GY ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneGY          ; 양수면 아무 작업도 하지 않고 종료

Make_GY:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneGY:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '

	


	ld		temp, X+
	mov		r5, temp
	ld		temp, X+
	mov		r4, temp
	
    sbrc    r5, 7       ; r5의 7번째 비트(부호 비트)가 0이면 양수 → skip
    rjmp    Make_GZ ; 음수 → 2의 보수화 루틴으로 점프
	PUTC	'+'
    rjmp    DoneGZ          ; 양수면 아무 작업도 하지 않고 종료

Make_GZ:
    com     r5           ; 하위 바이트 1의 보수
    com     r4           ; 상위 바이트 1의 보수
    add     r4, r1        ; 1 더해 2의 보수
	adc		r5, r0
	PUTC	'-'
DoneGZ:
	mov		r24, r5
	rcall	HexDisp
	mov		r24, r4
	rcall	HexDisp
	PUTC	' '
		*/
ret


CONV_DEG:    ; r5:r4 를 각도로 변환
	push	r20
	push	r21
	lsr		r5
	ror		r4
	lsr		r5
	ror		r4
	lsr		r5
	ror		r4
	lsr		r5
	ror		r4
	mov		r20, r4
	mov		r21, r5

	ldi		temp, 2
	SETZ	LOOK_0
DEG_LOOP:
	cp		r20, r0 ; r0 = 0x00
	cpc		r21, r0
	breq	END_DEG

	lpm		r5, Z+
	lpm		r4, Z+
	sub		r20, r1 ; 1씩 감소, r2 = 0xff
	sbc		r21, r0
	rjmp	DEG_LOOP
END_DEG:
	pop		r21
	pop		r20
	ret

Song:
	.db	DDo, Si, Ra, Sol, Pa, Mi, Re, Do, endsong, endsong

SegData:  ; 0 ~ 16, -, non   FND display data
	.db	0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x6f, 0x77, 0x7c, 0x58, 0x5e, 0x79, 0x71, 0x40, 0x00

PhoneNum:
	.db 17, 17, 17, 17, 17, 0, 1, 0, 16, 4, 0, 8, 7, 16, 1, 7, 2, 8, 17, 17, 17, 17

	; arc sin  look up table for mpu 6050
LOOK_0:
	.db 0x00,0x00 , 0x00,0x22 , 0x00,0x44 , 0x00,0x66 , 0x00,0x88 , 0x00,0xaa , 0x00,0xcc , 0x00,0xee , 0x01,0x10 , 0x01,0x33
	.db 0x01,0x55 , 0x01,0x77 , 0x01,0x99 , 0x01,0xbb , 0x01,0xdd , 0x01,0xff , 0x02,0x21 , 0x02,0x44 , 0x02,0x66 , 0x02,0x88
	.db 0x02,0xaa , 0x02,0xcc , 0x02,0xee , 0x03,0x10 , 0x03,0x33 , 0x03,0x55 , 0x03,0x77 , 0x03,0x99 , 0x03,0xbb , 0x03,0xdd
	.db 0x04,0x00 , 0x04,0x22 , 0x04,0x44 , 0x04,0x66 , 0x04,0x88 , 0x04,0xab , 0x04,0xcd , 0x04,0xef , 0x05,0x11 , 0x05,0x34
	.db 0x05,0x56 , 0x05,0x78 , 0x05,0x9a , 0x05,0xbd , 0x05,0xdf , 0x06,0x01 , 0x06,0x24 , 0x06,0x46 , 0x06,0x68 , 0x06,0x8b
	.db 0x06,0xad , 0x06,0xcf , 0x06,0xf2 , 0x07,0x14 , 0x07,0x36 , 0x07,0x59 , 0x07,0x7b , 0x07,0x9e , 0x07,0xc0 , 0x07,0xe2
	.db 0x08,0x05 , 0x08,0x27 , 0x08,0x4a , 0x08,0x6c , 0x08,0x8f , 0x08,0xb1 , 0x08,0xd4 , 0x08,0xf6 , 0x09,0x19 , 0x09,0x3b
	.db 0x09,0x5e , 0x09,0x81 , 0x09,0xa3 , 0x09,0xc6 , 0x09,0xe8 , 0x0a,0x0b , 0x0a,0x2e , 0x0a,0x50 , 0x0a,0x73 , 0x0a,0x96
	.db 0x0a,0xb8 , 0x0a,0xdb , 0x0a,0xfe , 0x0b,0x21 , 0x0b,0x43 , 0x0b,0x66 , 0x0b,0x89 , 0x0b,0xac , 0x0b,0xcf , 0x0b,0xf1
	.db 0x0c,0x14 , 0x0c,0x37 , 0x0c,0x5a , 0x0c,0x7d , 0x0c,0xa0 , 0x0c,0xc3 , 0x0c,0xe6 , 0x0d,0x09 , 0x0d,0x2c , 0x0d,0x4f
	.db 0x0d,0x72 , 0x0d,0x95 , 0x0d,0xb8 , 0x0d,0xdb , 0x0d,0xff , 0x0e,0x22 , 0x0e,0x45 , 0x0e,0x68 , 0x0e,0x8b , 0x0e,0xaf
	.db 0x0e,0xd2 , 0x0e,0xf5 , 0x0f,0x19 , 0x0f,0x3c , 0x0f,0x5f , 0x0f,0x83 , 0x0f,0xa6 , 0x0f,0xc9 , 0x0f,0xed , 0x10,0x10
	.db 0x10,0x34 , 0x10,0x57 , 0x10,0x7b , 0x10,0x9f , 0x10,0xc2 , 0x10,0xe6 , 0x11,0x09 , 0x11,0x2d , 0x11,0x51 , 0x11,0x75
	.db 0x11,0x75 , 0x11,0xbc , 0x11,0xe0 , 0x12,0x04 , 0x12,0x28 , 0x12,0x4c , 0x12,0x70 , 0x12,0x94 , 0x12,0xb8 , 0x12,0xdc
	.db 0x13,0x00 , 0x13,0x24 , 0x13,0x48 , 0x13,0x6c , 0x13,0x90 , 0x13,0xb4 , 0x13,0xd9 , 0x13,0xfd , 0x14,0x21 , 0x14,0x46
	.db 0x14,0x6a , 0x14,0x8e , 0x14,0xb3 , 0x14,0xd7 , 0x14,0xfc , 0x15,0x20 , 0x15,0x45 , 0x15,0x6a , 0x15,0x8e , 0x15,0xb3
	.db 0x15,0xd8 , 0x15,0xfd , 0x16,0x21 , 0x16,0x46 , 0x16,0x6b , 0x16,0x90 , 0x16,0xb5 , 0x16,0xda , 0x16,0xff , 0x17,0x24
	.db 0x17,0x49 , 0x17,0x6e , 0x17,0x94 , 0x17,0xb9 , 0x17,0xde , 0x18,0x03 , 0x18,0x29 , 0x18,0x4e , 0x18,0x74 , 0x18,0x99
	.db 0x18,0xbf , 0x18,0xe4 , 0x19,0x0a , 0x19,0x2f , 0x19,0x55 , 0x19,0x7b , 0x19,0xa1 , 0x19,0xc7 , 0x19,0xed , 0x1a,0x12
	.db 0x1a,0x38 , 0x1a,0x5f , 0x1a,0x85 , 0x1a,0xab , 0x1a,0xd1 , 0x1a,0xf7 , 0x1b,0x1e , 0x1b,0x44 , 0x1b,0x6a , 0x1b,0x91
	.db 0x1b,0xb7 , 0x1b,0xde , 0x1c,0x04 , 0x1c,0x2b , 0x1c,0x52 , 0x1c,0x79 , 0x1c,0x9f , 0x1c,0xc6 , 0x1c,0xed , 0x1d,0x14
	.db 0x1d,0x3b , 0x1d,0x62 , 0x1d,0x8a , 0x1d,0xb1 , 0x1d,0xd8 , 0x1e,0x00 , 0x1e,0x27 , 0x1e,0x4e , 0x1e,0x76 , 0x1e,0x9e
	.db 0x1e,0xc5 , 0x1e,0xed , 0x1f,0x15 , 0x1f,0x3d , 0x1f,0x65 , 0x1f,0x8d , 0x1f,0xb5 , 0x1f,0xdd , 0x20,0x05 , 0x20,0x2d
	.db 0x20,0x56 , 0x20,0x7e , 0x20,0xa6 , 0x20,0xcf , 0x20,0xf8 , 0x21,0x20 , 0x21,0x49 , 0x21,0x72 , 0x21,0x9b , 0x21,0xc4
	.db 0x21,0xed , 0x22,0x16 , 0x22,0x3f , 0x22,0x69 , 0x22,0x92 , 0x22,0xbb , 0x22,0xe5 , 0x23,0x0f , 0x23,0x38 , 0x23,0x62
	.db 0x23,0x8c , 0x23,0xb6 , 0x23,0xe0 , 0x24,0x0a , 0x24,0x34 , 0x24,0x5f , 0x24,0x89 , 0x24,0xb4 , 0x24,0xde , 0x25,0x09
	.db 0x25,0x34 , 0x25,0x5f , 0x25,0x8a , 0x25,0xb5 , 0x25,0xe0 , 0x26,0x0b , 0x26,0x36 , 0x26,0x62 , 0x26,0x8d , 0x26,0xb9
	.db 0x26,0xe5 , 0x27,0x11 , 0x27,0x3d , 0x27,0x69 , 0x27,0x95 , 0x27,0xc1 , 0x27,0xee , 0x27,0x1a , 0x28,0x47 , 0x28,0x74
	.db 0x28,0xa1 , 0x28,0xce , 0x28,0xfb , 0x29,0x28 , 0x29,0x55 , 0x29,0x83 , 0x29,0xb0 , 0x29,0xde , 0x2a,0x0c , 0x2a,0x3a
LOOK_29:
	.db 0x2a,0x3a


.DSEG

buffer:
	.byte	80
digit4:
	.db 	4

RawAccelBuffer: 
	.byte 14
